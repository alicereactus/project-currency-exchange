{"version":3,"sources":["redux/actions.ts","components/CurrencyExchange/CurrencyExchange.tsx","redux/selectors.ts","containers/CurrencyExchangeContainer/CurrencyExchangeContainer.tsx","App.tsx","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","CurrencyExchange","currenciesName","currentCurrency","currencyRate","isBuying","amountOfBYN","amountOfCurrency","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","Fragment","value","data-currency","onChange","className","map","currency","index","key","onClick","data-action","ChangeCurrencyFieldAC","type","CHANGE_CURRENCY_FIELD_TYPE","payload","ChangeActionAC","CHANGE_CHANGE_ACTION","selectAll","state","CurrencyEContainer","dispatch","_useDispatch","ac","useDispatch","useSelector","currencies","currencyName","buyRate","sellRate","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","changeCurrentCurrencyAC","App","CurrencyExchangeContainer","initialState","reducers","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72b9e550.chunk.js","sourcesContent":["import { useDispatch as _useDispatch } from 'react-redux';\n\n\nexport enum ACTIONS_TYPE {\n  CHANGE_CURRENCY_FIELD_TYPE = 'CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE',\n  CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\n  CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\n}\n\n\nexport type ChangeCurrencyFieldType = {\n  type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\n  payload: {\n    amountOfBYN: string,\n    amountOfCurrency: string\n  }\n};\n\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string): ChangeCurrencyFieldType => {\n  return {\n    type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\n    payload: { amountOfBYN, amountOfCurrency }\n  }\n};\n\nexport type ChangeAction = {\n  type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\n  payload: {\n    isBuying: boolean,\n  }\n};\n\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => {\n  return {\n    type: ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\n    payload: { isBuying }\n  }\n};\n\nexport type ChangeCurrentCurrencyType = {\n  type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\n  payload: {\n    currentCurrency: string,\n  }\n};\n\nexport const changeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => {\n  return {\n    type: ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\n    payload: { currentCurrency }\n  }\n};\n\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;\n\nexport function useDispatch() {\n  const dispatch = _useDispatch();\n  return (ac: CurrencyReducersTypes) => {\n    dispatch(ac);\n  }\n}\n\n","import React from 'react';\n\ntype CurrencyExchangePropsType = {\n  currenciesName: string[];\n  currentCurrency: string;\n  currencyRate: number;\n  isBuying: boolean;\n  amountOfBYN: string;\n  amountOfCurrency: string;\n  changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\n  changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\n};\n\nconst CurrencyExchange: React.FunctionComponent<CurrencyExchangePropsType> = ({\n  currenciesName,\n  currentCurrency,\n  currencyRate,\n  isBuying,\n  amountOfBYN,\n  amountOfCurrency,\n  changeCurrencyField,\n  changeAction,\n  changeCurrentCurrency,\n}) => {\n  const viewCurrency = isBuying ? (\n    <React.Fragment>\n      <label>\n        You give the next amount of BYN:\n        <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\n      </label>\n      <label>\n        You get the next amount of {currentCurrency}:\n        <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\n      </label>\n    </React.Fragment>\n  ) : (\n    <React.Fragment>\n      <label>\n        You give the next amount of {currentCurrency}:\n        <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\n      </label>\n      <label>\n        You get the next amount of BYN:\n        <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\n      </label>\n    </React.Fragment>\n  );\n\n  return (\n    <div className=\"currency\">\n      <h2>Currency exchange</h2>\n      <div className=\"currency-names\">\n        <p>Current currency:</p>\n        <ul>\n          {currenciesName.map((currency: string, index: number) => {\n            return (\n              <li\n                key={`${index}-${currency}`}\n                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\n                onClick={changeCurrentCurrency}\n                data-currency={currency}\n              >\n                {currency}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      <div className=\"currency-action\">\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\n          Buy\n        </span>\n        <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\n          Sell\n        </span>\n      </div>\n      <div className=\"fields\">\n        <p>Currency rate: {currencyRate}</p>\n        {viewCurrency}\n      </div>\n    </div>\n  );\n};\n\nexport default CurrencyExchange;\n","import { IGlobalState} from './state';\r\ninterface IRootState extends IGlobalState {};\r\n\r\nexport const selectCurrencies = (state: IRootState) => state.currency.currencies;\r\nexport const selectCurrenCurrency = (state: IRootState) => state.currency.currentCurrency;\r\nexport const selectIsBuying = (state: IRootState) => state.currency.isBuying;\r\nexport const selectAmountOfBYN = (state: IRootState) => state.currency.amountOfBYN;\r\nexport const selectAmountOfCurrency = (state: IRootState) => state.currency.amountOfCurrency;\r\n\r\nexport const selectAll = (state: IRootState) => state.currency;\r\n","import React from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\nimport { IGlobalState } from '../../redux/state';\nimport { CurrencyState } from '../../redux/currencyReducer';\nimport { compose, Dispatch } from 'redux';\nimport {\n  ACTIONS_TYPE,\n  ChangeActionAC,\n  ChangeCurrencyFieldAC,\n  changeCurrentCurrencyAC,\n  CurrencyReducersTypes,\n  useDispatch\n} from '../../redux/actions';\nimport {\n  selectAll,\n  selectAmountOfBYN,\n  selectAmountOfCurrency,\n  selectCurrencies,\n  selectCurrenCurrency,\n  selectIsBuying,\n} from '../../redux/selectors';\n\n// interface ICurrencyProps extends CurrencyState {\n//   setCurrencyAmount: (amountOfBYN: string, amountOfCurrency: string) => void;\n//   setAction: (isBuying: boolean) => void;\n//   changeCurrency: (currency: string) => void;\n// }\n\n// interface ICurrencyProps extends CurrencyState {\n//   ChangeCurrencyFieldAC: Function;\n//   ChangeActionAC: Function;\n//   changeCurrentCurrencyAC: Function;\n// }\n\n// useDispatch\ninterface ICurrencyProps extends CurrencyState {\n}\n\n\n// const CurrencyEContainer: React.FunctionComponent<ICurrencyProps> = ({\n//   currencies,\n//   currentCurrency,\n//   isBuying,\n//   amountOfBYN,\n//   amountOfCurrency,\n//   // setCurrencyAmount,\n//   // setAction,\n//   // changeCurrency,\n//                                                                        ChangeCurrencyFieldAC,\n//                                                                        ChangeActionAC,\n//                                                                        changeCurrentCurrencyAC,\n// })\n//\n\n// const CurrencyEContainer: React.FunctionComponent<ICurrencyProps> = ({\n//   currencies,\n//   currentCurrency,\n//   isBuying,\n//   amountOfBYN,\n//   amountOfCurrency,\n// })=> {\n\nconst CurrencyEContainer: React.FunctionComponent = () => {\n\n   let dispatch = useDispatch();\n  // const currencies = useSelector(selectCurrencies);\n  // const currentCurrency = useSelector(selectCurrenCurrency);\n  // const isBuying = useSelector(selectIsBuying);\n  // const amountOfBYN = useSelector(selectAmountOfBYN);\n  // const amountOfCurrency = useSelector(selectAmountOfCurrency);\n\n  const { currencies, currentCurrency, isBuying, amountOfBYN, amountOfCurrency} = useSelector(selectAll);\n\n  let currencyRate: number = 0;\n  const currenciesName = currencies.map((currency) => {\n    if (currency.currencyName === currentCurrency) {\n      currencyRate = isBuying ? currency.buyRate : currency.sellRate;\n    }\n    return currency.currencyName;\n  });\n\n  const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\n    let value = e.currentTarget.value;\n    if (!isFinite(+value)) return;\n    if (e.currentTarget.dataset.currency) {\n      const trigger: string = e.currentTarget.dataset.currency;\n      if (trigger === 'byn') {\n        if (value === '') {\n          // setCurrencyAmount(value, value);\n          // ChangeCurrencyFieldAC(value, value);\n          dispatch(ChangeCurrencyFieldAC(value, value));\n          // dispatch({\n          //   type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\n          //   payload: { amountOfBYN: value, amountOfCurrency : value }\n          // });\n        } else {\n          //setCurrencyAmount(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\n          // ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\n          dispatch(ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2)));\n        }\n      } else {\n        if (value === '') {\n          // setCurrencyAmount(value, value);\n          // ChangeCurrencyFieldAC(value, value);\n          dispatch(ChangeCurrencyFieldAC(value, value));\n        } else {\n          // setCurrencyAmount((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\n          // ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\n          dispatch(ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value));\n        }\n      }\n    }\n  };\n  const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\n    // e.currentTarget.dataset.action === 'buy' ? setAction(true) : setAction(false);\n    // e.currentTarget.dataset.action === 'buy' ? ChangeActionAC(true) : ChangeActionAC(false);\n    e.currentTarget.dataset.action === 'buy' ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false));\n  };\n\n  const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\n    // e.currentTarget.dataset.currency && changeCurrency(e.currentTarget.dataset.currency);\n    // e.currentTarget.dataset.currency && changeCurrentCurrencyAC(e.currentTarget.dataset.currency);\n    e.currentTarget.dataset.currency && dispatch(changeCurrentCurrencyAC(e.currentTarget.dataset.currency));\n  };\n\n  return (\n    <React.Fragment>\n      <CurrencyExchange\n        currenciesName={currenciesName}\n        currentCurrency={currentCurrency}\n        currencyRate={currencyRate}\n        isBuying={isBuying}\n        amountOfBYN={amountOfBYN}\n        amountOfCurrency={amountOfCurrency}\n        changeCurrencyField={changeCurrencyField}\n        changeAction={changeAction}\n        changeCurrentCurrency={changeCurrentCurrency}\n      />\n    </React.Fragment>\n  );\n};\n\n// const mapStateToProps = (state: IGlobalState) => {\n//   return {\n//     currencies: state.currency.currencies,\n//     currentCurrency: state.currency.currentCurrency,\n//     isBuying: state.currency.isBuying,\n//     amountOfBYN: state.currency.amountOfBYN,\n//     amountOfCurrency: state.currency.amountOfCurrency,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch: Dispatch<CurrencyReducersTypes>) => {\n//   return {\n//     setCurrencyAmount(amountOfBYN: string, amountOfCurrency: string) {\n//       dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\n//     },\n//     setAction(isBuying: boolean) {\n//       dispatch(ChangeActionAC(isBuying));\n//     },\n//     changeCurrency(currency: string) {\n//       dispatch(changeCurrentCurrencyAC(currency));\n//     },\n//   };\n// };\n\n//export const CurrencyExchangeContainer = compose(connect(mapStateToProps, mapDispatchToProps))(CurrencyEContainer);\n// Shorthand mapDispatchToProps\n// export const CurrencyExchangeContainer = compose(connect(mapStateToProps,\n//   {ChangeCurrencyFieldAC, ChangeActionAC, changeCurrentCurrencyAC}))(CurrencyEContainer);\n// useDispatch\n// export const CurrencyExchangeContainer = compose(connect(mapStateToProps,\n//   {}))(CurrencyEContainer);\n\nexport default CurrencyEContainer;","import React from 'react';\nimport './App.css';\nimport CurrencyExchangeContainer from './containers/CurrencyExchangeContainer/CurrencyExchangeContainer';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <CurrencyExchangeContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { ACTIONS_TYPE, CurrencyReducersTypes } from './actions';\n\ntype CurrencyType = {\n  currencyName: string;\n  buyRate: number;\n  sellRate: number;\n};\nexport type CurrencyState = {\n  currencies: Array<CurrencyType>;\n  currentCurrency: string;\n  isBuying: boolean;\n  amountOfBYN: string;\n  amountOfCurrency: string;\n};\n\nconst initialState: CurrencyState = {\n  currencies: [\n    {\n      currencyName: 'USD',\n      buyRate: 2.62,\n      sellRate: 2.58,\n    },\n    {\n      currencyName: 'EUR',\n      buyRate: 3.1,\n      sellRate: 3.06,\n    },\n    {\n      currencyName: 'RUR',\n      buyRate: 0.0345,\n      sellRate: 0.0341,\n    },\n  ],\n  currentCurrency: 'USD',\n  isBuying: true,\n  amountOfBYN: '',\n  amountOfCurrency: '',\n};\n\nexport const currencyReducer = (state: CurrencyState = initialState, action: CurrencyReducersTypes): CurrencyState => {\n  switch (action.type) {\n    case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\n      return {\n        ...state,\n        ...action.payload,\n      };\n    case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\n      return {\n        ...state,\n        ...action.payload,\n        amountOfBYN: '',\n        amountOfCurrency: '',\n      };\n    case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\n      return {\n        ...state,\n        ...action.payload,\n        amountOfBYN: '',\n        amountOfCurrency: '',\n      }\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore } from 'redux';\nimport { currencyReducer } from './currencyReducer';\n\nconst reducers = combineReducers({\n  currency: currencyReducer,\n});\nexport type IGlobalState = ReturnType<typeof reducers>;\n\nexport const store = createStore(reducers);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/state';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}